pipeline StopsPipeline
{

   GTFSStopsExtractor
        -> GTFSStopsArchiveInterpreter
        -> GTFSStopsFilePicker
        -> GTFSStopsTextFileInterpreter
        -> GTFSStopsCSVInterpreter 
        -> GTFSStopsTableInterpreter
        -> GTFSStopsLoader;

    block GTFSStopsExtractor oftype HttpExtractor 
    {
        url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    } 

    block GTFSStopsArchiveInterpreter oftype ArchiveInterpreter 
    {
        archiveType: "zip";

    }
    block GTFSStopsFilePicker oftype FilePicker      
    {
        path: "/stops.txt";
    }
    block GTFSStopsTextFileInterpreter oftype TextFileInterpreter {encoding:"utf8";}
    block GTFSStopsCSVInterpreter oftype CSVInterpreter 
    {
        delimiter: ",";
        enclosing: '"';
    }

    block GTFSStopsTableInterpreter oftype TableInterpreter 
    {
        header : true;
        columns : [
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype GeoCoordinates,
            "stop_lon" oftype GeoCoordinates,
            "zone_id" oftype Zone,
        ];
    }

    block GTFSStopsLoader oftype SQLiteLoader 
    {
        file: "gtfs.sqlite";
        table: "stops";

    }

    // stop_lat/stop_lon must be a geographic coordinates between -90 and 90, including upper/lower bounds
    constraint ValidGeoCoordinates on decimal:
        value >= -90 and value <= 90;
    valuetype GeoCoordinates oftype decimal {
        constraints:[ValidGeoCoordinates];
    }

    // Only keep zone_id 1925
    constraint ZoneConstraint on integer:
        value == 1925;
    valuetype Zone oftype integer {
        constraints:[ZoneConstraint];
    }
    
    

}